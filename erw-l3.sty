%%
%% This is file `erw-l3.sty',
%% generated with the docstrip utility.
%%
%% The original source files were:
%%
%% erw-l3.dtx  (with options: `package')
%% ----------------------------------------------------------------------------
%% erw-l3 ---  Utilities using LaTeX3
%% Released under the LaTeX Project Public License v1.3c or later
%% See http://www.latex-project.org/lppl.txt
%% ----------------------------------------------------------------------------
%% 
 \NeedsTeXFormat{LaTeX2e}[2020/02/02]
 \RequirePackage{etoolbox}[2019/09/21]
 \RequirePackage{l3keys2e}[2020/03/06]
 \RequirePackage{xparse}[2020/03/06]
 \ProvidesExplPackage
 {erw-l3}                                                                            % Package name
 {2020/04/30}                                                                        % Release date
 {1.8}                                                                               % Release version
 {erw-l3 --- Utilities using LaTeX3 }                                                % Description
\ExplSyntaxOn
\cs_set:Nn \@@_cs_name:N
{
  \exp_last_unbraced:Nf \use_i:nnn {\cs_split_function:N #1}
}
\cs_set:Nn \erw_append_arg:nn
{
  {#1{#2}}
}
\cs_set:Nn \erw_cs_apply:Nn
{
  #1{#2}
}
\cs_generate_variant:Nn \erw_cs_apply:Nn {No, Nf, Nx, c}
\cs_set:Nn \erw_cs_apply:Nnn
{
  #1{#2}{#3}
}
\cs_set:Nn \erw_cs_apply:Nnnn
{
  #1{#2}{#3}{#4}
}
\cs_set:Nn \erw_cs_apply:Nnnnn
{
  #1{#2}{#3}{#4}{#5}
}
\cs_set:Npn \erw_cs_identity:n #1{#1}
\cs_set:Nn \erw_cs_set_inline:Nn
{
  \cs_set:Npn #1 ##1{#2}
}
\cs_generate_variant:Nn \erw_cs_set_inline:Nn {cn}
\cs_set:Nn \erw_cs_gset_inline:Nn
{
  \cs_gset:Npn #1 ##1{#2}
}
\cs_generate_variant:Nn \erw_cs_gset_inline:Nn {cn}
\int_new:N \g@@_csint_int
\tl_set:Nn \g@@_csint_name_tl {\erw_csint_name:n{\g@@_csint_int}}
\cs_set:Nn \erw_csint:nn
{
  \erw_cs_apply:cn{@@_csint_\int_to_alph:n{#1}:n}{#2}
}
\cs_set:Nn \erw_csint_name:n {@@_csint_\int_to_alph:n{#1}:n}
\cs_new:Nn \erw_csint_names:nnn
{
  \int_step_function:nnnN { #1 }{ #2 }{ #3 } \erw_csint_name:n
}
\cs_new_protected:Nn \erw_csint_new:n
{
  \int_incr:N \g@@_csint_int
  \erw_cs_set_inline:cn{\g@@_csint_name_tl}
  {
    \token_if_cs:NTF
    {#1}
    {#1{##1}}
    {#1}
  }
}
\cs_new:Nn \erw_csint_names_braced:nnn
{
  \int_step_function:nnnN { #1 }{ #2 }{ #3 } \erw_csint_names_braced:n
  % TODO \tl_range_braced:nnn?
}
\cs_set:Nn \erw_csint_names_braced:n {{\erw_csint_name:n{#1}}}
\cs_new:Nn \erw_csint_names_braced:
{
  \erw_csint_names_braced:nnn{1}{1}{\g@@_csint_int}
}
\cs_new_protected:Nn \erw_csint_reset:
{
  \int_zero:N \g@@_csint_int
  \tl_set:Nn \@@_csint_ext_tl{}%^^A TODO remove?
}
\cs_set:Npn \@@_int_range:nnn #1 #2 #3
{
  \int_compare:nNnTF
  {
    \int_eval:n{#2+1}
  }>{#3}
  {
    {#1}
  }
  {
    \@@_int_range:nnn
    {
      \exp_args:Nx\erw_append_arg:nn{#1}
      {
        \int_eval:n{#2+1}
      }
    }
    {\int_eval:n{#2+1}}
    {#3}
  }
}
\cs_set:Nn \erw_int_range:nn
{
  \@@_int_range:nnn {{#1}}{#1}{#2}
}
\cs_set:Nn \erw_int_range:n
{
  \@@_int_range:nnn {}{0}{#1}
}
\msg_new:nnn{@@}{generic}{#1}
\msg_new:nnn{@@}{notdecl}{#1~not~declared}
\msg_new:nnn{@@}{notset}{#1~not~set}
\tl_new:N \g@@_compose_tl
\tl_new:N \g@@_oper_fold_seq_item_tl
\cs_set:Nn \@@_oper_compose:NnN
{
  \erw_cs_set_inline:Nn \@@_oper_function:n
  {
    #1{##1}#3
  }
  \exp_args:Nf\erw_tl_map:n
  {
    \tl_reverse:n{#2}
  }
}
\cs_set:Nn \erw_oper_compose:nN
{
  \@@_oper_compose:NnN \erw_oper_fold:NN {#1} #2
}
\cs_set:Nn \erw_oper_compose:nn
{
  \tl_set:Nn \g@@_compose_tl {#2}
  \erw_oper_compose:nN{#1}\g@@_compose_tl
  \g@@_compose_tl
}
\cs_set:Nn \erw_oper_compose_c:nN
{
  \@@_oper_compose:NnN \erw_oper_fold:cN {#1} #2
}
\cs_set:Nn \erw_oper_compose_c:nn
{
  \tl_set:Nn \g@@_compose_tl {#2}
  \erw_oper_compose_c:nN{#1}\g@@_compose_tl
  \g@@_compose_tl
}
\cs_set:Nn \erw_oper_compose_vers:nN
{
  \msg_error:nnn{@@}{notdecl}{\erw_oper_compose_vers:nN}
}
\cs_set:Nn \erw_oper_compose_vers:nn
{
  \erw_csint_reset:{}
  \tl_map_function:nN{#1}\erw_csint_new:n
  \exp_last_unbraced:Nx
  \erw_oper_compose_c:nn
  {{\erw_csint_names_braced:{}}}
  {#2}
}
\cs_set:Nn \erw_oper_compose_seq:nN
{
  \@@_oper_compose:NnN \erw_oper_fold_seq:NN {#1} #2
}
\cs_set:Nn \erw_oper_compose_seq_c:nN
{
  \@@_oper_compose:NnN \erw_oper_fold_seq:cN {#1} #2
}
\cs_set:Nn \erw_oper_compose_seq_vers:nN
{
  \msg_error:nnn{@@}{notdecl}{\erw_oper_compose_seq_vers:nN}
}
\cs_set:Nn \erw_oper_gset_function:N
{
  \erw_cs_gset_eq:NN \@@_oper_function:n #1
}
\cs_set:Nn \erw_oper_gset_function:n
{
  \erw_cs_gset_inline:Nn \@@_oper_function:n {#1}
}
\keys_define:nn{@@}
{
  oper/fold_set_par.tl_gset:N = \g@@_oper_fold_set_par_tl,
  oper/fold_set_par.value_required:n = true,
  oper/fold_set_par.default:n = {Nf},
  oper/fold_set_par.initial:n = {Nf},
  oper/fold_apply_par.tl_gset:N = \g@@_oper_fold_apply_par_tl,
  oper/fold_apply_par.value_required:n = true,
  oper/fold_apply_par.default:n = {Nf},
  oper/fold_apply_par.initial:n = {Nf}
}
\cs_set:Nn \erw_oper_fold:NN
{
  \use:c{tl_set:\g@@_oper_fold_set_par_tl}
  #2
  {\use:c{erw_cs_apply:\g@@_oper_fold_apply_par_tl}{#1}{#2}}
}
\cs_generate_variant:Nn \erw_oper_fold:NN {cN}
\cs_set:Nn \erw_oper_fold_seq:NN
{
  \seq_get_right:NN #2 \g@@_oper_fold_seq_item_tl
  \erw_oper_fold:NN #1 \g@@_oper_fold_seq_item_tl
  \seq_put_right:No #2 {\g@@_oper_fold_seq_item_tl}
}
\cs_generate_variant:Nn \erw_oper_fold_seq:NN {cN}
\msg_new:nnn{@@}{timestamp / base}{Calling~#1,~arg~must~be~'dec|hex'}
\msg_new:nnn{@@}{timestamp / period}{Calling~#1,~arg~must~be~'date|time|datetime'}
\cs_new:Nn \@@_timestamp_date_dec:
{
  \int_eval:n
  {
    \c_sys_year_int * 10000
    +\c_sys_month_int * 100
    +\c_sys_day_int *  1
  }
}
\cs_new:Nn \@@_timestamp_date:N{\int_to_hex:n{\@@_timestamp_date_dec:}}
\cs_new:Nn \@@_timestamp_date_hex:{\int_to_hex:n{\@@_timestamp_date_dec:}}
\cs_new:Nn \@@_timestamp_time_dec:
{
  \int_eval:n
  {
    \c_sys_hour_int * 100
    +\c_sys_minute_int * 1
  }
}
\cs_new:Nn\@@_timestamp_time_hex:{\int_to_hex:n{\@@_timestamp_time_dec:}}
\cs_new:Nn\@@_timestamp_datetime_base:n
{
  \int_case:nnTF{#1}
  {
    {10}{dec}
    {16}{hex}
  }
  {\c_empty_tl}
  {\msg_error:nnn{@@}{timestamp / base}{\@@_timestamp_datetime_base:n{#1}}}
}
\cs_new:Nn\@@_timestamp_datetime_join:nnn{#1#2#3}
\cs_new:Nn\@@_timestamp_datetime_join:nn{\@@_timestamp_datetime_join:nnn{#1}{\g@@_timestamp_delim_str}{#2}}
\cs_new:Nn\@@_timestamp_datetime_period:n
{
  \str_case:nnTF{#1}
  {
    {date}{date}
    {time}{time}
    {datetime}{datetime}
  }
  {\c_empty_tl}
  {\msg_error:nnn{@@}{ timestamp / period }{\@@_timestamp_datetime_period:n{#1}}}
}
\cs_new:Nn\@@_timestamp_datetime_dec: {\@@_timestamp_datetime_join:nn{\@@_timestamp_date_dec:}{\@@_timestamp_time_dec:}}
\cs_new:Nn\@@_timestamp_datetime_hex: {\@@_timestamp_datetime_join:nn{\@@_timestamp_date_hex:}{\@@_timestamp_time_hex:}}
\cs_new:Nn\@@_timestamp:nn
{
  \exp_args:No
  \use:c{@@_timestamp_\@@_timestamp_datetime_period:n{#1}_\@@_timestamp_datetime_base:n{#2}:}
}
\cs_new_protected:Nn \@@_timestamp_set_delim:nn
{
  \use:c{tl_gset:N#1}
  \g@@_timestamp_delim_str{#2}
}
\keys_define:nn{@@}
{
  timestamp / delim .code:n =
  {
    \exp_last_unbraced:No
    \@@_timestamp_set_delim:nn{n}{#1}
  },
  timestamp / delim  .value_required:n = true,
  timestamp / delim  .default:n = {-},
  timestamp / delim  .initial:n = {-}
}
\cs_new:Nn\erw_timestamp:nn
{
  \@@_timestamp:nn{#1}{#2}
}
\cs_new:Nn\erw_timestamp:
{
  \@@_timestamp:nn{datetime}{16}
}
\cs_new_protected:Nn \@@_oper_function:n
{
  \msg_error:nnn
  {erw}
  {notset}
  {\@@_oper_function:n}
}
\cs_set_protected:Nn \@@_map:nn
{
  \quark_if_recursion_tail_stop:n{#1}
  \@@_oper_function:n{#1}  \@@_map:nn{#2}
}
\cs_set_protected:Nn \@@_map_thread_at:Nnn
{
  \erw_cs_apply:Nn #1
  {\exp_args:Nf\tl_item:nn {#3} {#2} }
}
\cs_set_protected:Nn \@@_map_thread_at:Nnnn
{
  \erw_cs_apply:Nnn #1
  {\exp_args:Nf\tl_item:nn {#3} {#2} }
  {\exp_args:Nf\tl_item:nn {#4} {#2} }
}
\cs_set_protected:Nn \@@_map_thread_at:Nnnnn
{
  \erw_cs_apply:Nnnn #1
  {\exp_args:Nf\tl_item:nn {#3} {#2} }
  {\exp_args:Nf\tl_item:nn {#4} {#2} }
  {\exp_args:Nf\tl_item:nn {#5} {#2} }
}
\cs_set_protected:Nn \@@_map_thread_at:Nnnnnn
{
  \erw_cs_apply:Nnnnn #1
  {\exp_args:Nf\tl_item:nn {#3} {#2} }
  {\exp_args:Nf\tl_item:nn {#4} {#2} }
  {\exp_args:Nf\tl_item:nn {#5} {#2} }
  {\exp_args:Nf\tl_item:nn {#6} {#2} }
}
\cs_set:Nn \erw_tl_last_item:n
{
  \exp_args:Nof \tl_item:nn
  {#1}
  {
    \tl_count:n{#1}
  }
}
\cs_set_protected:Nn \erw_tl_map:n
{
  \@@_map:nn#1\q_recursion_tail\q_recursion_stop\q_recursion_tail\q_recursion_stop
}
\cs_set_protected:Nn \erw_tl_map:Nn
{
  \cs_set_eq:NN \@@_oper_function:n #1
  \erw_tl_map:n{#2}
}
\cs_set_protected:Nn \erw_tl_map_inline:nn
{
  \erw_cs_set_inline:Nn \@@_oper_function:n {#1}
  \erw_tl_map:n{#2}
}
\cs_set:Nn \erw_tl_merge:nn
{
  {#1#2}
}
\cs_set:Nn \erw_tl_repeat:nn
{
  \int_step_inline:nnnn{1}{1}{#1}{#2}
}
\cs_set_protected:Nn \erw_tl_split:nnn
{
  \tl_head:n{#1}
  \use:c{exp_args:#3} \tl_map_inline:nn
  {
    \tl_tail:n
    {
      #1
    }
  }{#2##1}
}
\cs_set_protected:Nn \erw_tl_split:nn
{
  \erw_tl_split:nnn{#1}{#2}{Nf}
}
\cs_set_protected:Nn \erw_tl_map_thread_at:Nnn
{
  \exp_args:Nf\int_case:nnTF
  {
    \tl_count:n{#3}
  }
  {
    {1}{ \@@_map_thread_at:Nnn #1{#2}#3 }
    {2}{ \@@_map_thread_at:Nnnn #1{#2}#3 }
    {3}{ \@@_map_thread_at:Nnnnn #1{#2}#3 }
    {4}{ \@@_map_thread_at:Nnnnnn #1{#2}#3 }
  }
  {
    % Do nothing
  }
  {
    \msg_error:nnn{@@}
    {generic}
    {erw_tl_map_thread_at:~count~of~#3~not~withing~1~to~4}
  }
}
\cs_set_protected:Nn \erw_tl_map_thread:Nn
{
  % TODO check that #2 is a matrix
  \int_step_inline:nn
  {
    \exp_args:Nf \tl_count:n{ \tl_head:n{#2} }
  }
  {
    \erw_tl_map_thread_at:Nnn #1 {##1} {#2}
  }
}
\cs_new_protected:Nn\erw_option:n
{
  \keys_set:nn{@@}{#1}
}
\ExplSyntaxOff
%% 
%% Copyright (C) 2020 by Erwann Rogard
%% 
%% This work may be distributed and/or modified under the
%% conditions of the LaTeX Project Public License (LPPL), either
%% version 1.3c of this license or (at your option) any later
%% version.  The latest version of this license is in the file:
%% 
%% http://www.latex-project.org/lppl.txt
%% 
%% This work is "maintained" (as per LPPL maintenance status) by
%% Erwann Rogard.
%% 
%% This work consists of the file erw-l3.dtx and the derived files:
%% erw-l3.sty, and erw-l3.pdf.
%% 
%%
%% End of file `erw-l3.sty'.
